using Cloud.Common.Core;
using Microsoft.Net.Http.Headers;
using System;
using Microsoft.AspNetCore.Http;

namespace Cloud.Common.Extensions
{
    public static class HttpContextExtensions
    {
        public static Guid ValidateAndGetClientId(this HttpContext httpContext)
        {
            if (httpContext.Request.Query[Globals.ClientId].Count == 0)
                throw new ArgumentNullException($"{Globals.ClientId} Required");

            Guid clientId;
            var clientIdFromQueryString = httpContext.Request.Query[Globals.ClientId];
            if (Guid.TryParse(clientIdFromQueryString, out clientId))
                return clientId;

            throw new InvalidCastException($"Expected Guid for ClientId but specified value is: \"{clientIdFromQueryString}\"");
        }

        public static Tuple<Guid, ClientType, bool> DispatcherHelper(this HttpContext httpContext)
        {
            // Set default client type as Console Application
            var clientType = ClientType.Console;

            // Get clientId from query string, generated by client during websocket establishing.
            Guid clientId = httpContext.ValidateAndGetClientId();

            // The request from a browser
            if (httpContext.Request.Headers[HeaderNames.UserAgent].Count > 0)
                clientType = ClientType.Browser;

            // The request from Master App (Cloud.Server - Self[Master])
            if (httpContext.Request.Query[Globals.Owner].Count > 0)
                clientType = httpContext.Request.Query[Globals.Owner].ToString() == Globals.Master 
                    ? ClientType.Master 
                    : ClientType.Console;

            bool isMaster = clientType == ClientType.Master;

            return new Tuple<Guid, ClientType, bool>(clientId, clientType, isMaster);
        }
    }
}
